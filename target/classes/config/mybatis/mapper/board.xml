<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">

	<select id="selectList" resultType="board">
		select * from board
	</select>

	<select id="selectList_index" resultType="board">
		select * from board
		order by idx desc limit 3
	</select>

	<select id="selectOne" resultType="board" parameterType="int">
		select *
		from board where idx=#{idx}
	</select>

	<insert id="insert" parameterType="board">
		insert into board (user_idx,
		title, content) values (#{user_idx}, #{title}, #{content})
	</insert>

	<!-- 게시글 삭제 부분 ( delete 타임만 추가 ) -->
	<update id="board_del_update" parameterType="board">
		UPDATE board
		SET
		deleted_at = current_timestamp()
		where idx=#{idx}
	</update>

	<!-- 조회수 증가 -->
	<update id="update_hit" parameterType="int">
		update board set hit = hit
		+ 1
		where idx=#{idx}
	</update>

	<!-- 커뮤니티 목록보기 -->
	<select resultType="board" id="select_community_list">
		select *
		from board b left outer join user u
		on u.idx = b.user_idx
	</select>

	<!-- 작성자 idx이용해서 idx값이아닌 이름나오게하기 -->
	<select id="select_community_list_name" parameterType="int"
		resultType="string">
		select user.name, *
		from board left outer join user
		on
		user.idx=#{board.idx}
	</select>

	<!-- 커뮤니티 원글 수정 -->
	<update id="update_modify" parameterType="board">
		update board set
		title=#{title}, content=#{content}, updated_at=current_timestamp()
		where idx=#{idx}
	</update>
	
	<!-- 중복 추천 확인 -->
	<select id="check_recommend" parameterType="java.util.Map" resultType="int">
		select count(*)
		from board_recommend
		where board_idx=#{idx} and user_idx=#{now_user} and is_recommend=1
	</select>

	<!-- board 테이블 추천수 올리기 -->
	<update id="update_b_recommend" parameterType="int">
		update board
		set recommend=recommend+1
		where idx=#{idx}
	</update>
	
	<!-- board_recommend 업데이트 -->
	<insert id="update_br_recommend" parameterType="java.util.Map">
		insert into board_recommend (board_idx, user_idx)
		values (#{idx}, #{now_user})
	</insert>
	
	<!-- 전체 게시물 조회 -->
	<select resultType="board" id="list_page">
		select * from board order by ref
		desc, step asc
	</select>

	<select resultType="board" id="list_condition"
		parameterType="java.util.Map">
		select *, user.name
		from (SELECT rank() over(order by is_notice desc ,idx desc) AS no, b.* FROM (select * from board where study_idx is null) AS b ) AS list
		left outer join user
		on user.idx = list.user_idx
		where no between #{start} AND #{end}
	</select>

	<!-- 전체게시물 수 조회 -->
	<select resultType="int" id="count">
		select count(*) from board where study_idx is null
	</select>

	<!-- 검색기능 -->
	<select resultType="board" id="list_search"
		parameterType="java.util.Map">
		
		select *, user.name
		from (SELECT rank() over(order by  is_notice desc,idx desc ) AS no, b.*
				FROM (select * from board where study_idx is null and title like CONCAT('%',#{search},'%')) AS b ) AS list
		left outer join user
		on user.idx = list.user_idx
		where no between #{start} AND #{end}
		
	</select>
	
	<select resultType="int" id="search_count" parameterType="java.lang.String">
	
		select count(*)
		from board
		where title like CONCAT('%',#{search},'%') and  study_idx is null

	</select>
	
	<!-- 원글 삭제하기 -->
	<update id="delete_community" parameterType="int">
		update board
		set title='삭제된 게시물입니다', deleted_at=current_timestamp()
		where idx=#{idx}
	</update>
	
	<!-- 스터디 게시판 리스트 -->
	<select id="study_board_list" parameterType="java.util.Map" resultType="board">
		select *, user.name
		from (SELECT rank() over(order by is_notice desc, idx desc) AS no, b.* FROM (select * from board where study_idx = #{study_idx}) AS b ) AS list
		left outer join user
		on user.idx = list.user_idx
		where no between #{start} AND #{end}
	</select>
	<select id="study_board_list_cnt" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*)
		FROM board
		WHERE study_idx=#{study_idx}
	</select>
	
	
	<!-- 스터디 게시판 게시물 작성 -->
	<insert id="study_board_write" parameterType="java.util.Map">
		INSERT INTO board
		(study_idx, title, user_idx, content, is_notice)
		VALUES (#{study_idx}, #{title}, #{user_idx}, #{content}, #{is_notice})
	</insert>
	
	
</mapper>












