<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="study">

	<!-- 스터디 전체게시물 수 조회 -->
	<select resultType="int" id="count">
		select count(*) from study
	</select>

	<!-- index.jsp에서 스터디목록들 나오게하기(스터디 페이지로 안넘어감) -->
	<select id="index_study_list" resultType="study" >
		select * from study
		order by idx desc limit 8
	</select>
	
	<!-- 스터디 생성 -->
	<insert id="insert" parameterType="study">
		INSERT INTO study (title, create_user_idx, 
						min_count, max_count, deadline, start_date,
						end_date, open_kakao, purpose, is_online,
						place, extra_info, apply_condition, detail_info,
						study_status, photo) 											
		VALUES (#{title}, #{create_user_idx}, #{min_count}, #{max_count},
				#{deadline}, #{start_date}, #{end_date}, #{open_kakao},
 				#{purpose}, #{is_online},#{place}, #{extra_info}, #{apply_condition}, 
		 		#{detail_info}, '모집중', #{photo})
		<selectKey resultType="int" keyProperty="idx" order="AFTER">
			SELECT LAST_INSERT_ID()
    	</selectKey> 
	</insert>
	
	<!-- 스터디 상세보기 -->
	<select id="selectOne" parameterType="int" resultType="study">
		select * from study where idx=#{idx}
	</select>
	
	<!-- 텍스트 검색어에 따른  검색 결과 개수 -->
	<select resultType="int" id="search_count" parameterType="java.lang.String">
		select count(*)
		from study
		where  title like CONCAT('%',#{search},'%')
	</select>
	
	<!-- 텍스트 검색기능 -->
	<select resultType="study" id="list_search" parameterType="java.util.Map">
		<!-- 분류 -->
		select *
		from (SELECT rank() over(order by idx desc) AS no,
		b.* FROM (select * from study where title like CONCAT('%',#{search},'%')) AS b ) AS list
		where no between #{start} AND #{end}
	</select>
	
	<!-- 페이징 -->
	<select resultType="study" id="list_condition" parameterType="java.util.Map">
		select *, user.name
		from (SELECT rank() over(order by idx desc) AS no,
		s.* FROM (select * from study) AS s ) AS list
		left outer join user
		on user.idx = list.create_user_idx
		where no between #{start} AND #{end}
	</select>
	
	<!-- 스터디룸 수정하기 -->
	<update id="update_study" parameterType="study">
		UPDATE study SET title=#{title}, photo=#{photo}, min_count=#{min_count},
		max_count=#{max_count},deadline=#{deadline},start_date=#{start_date},
		end_date=#{end_date},open_kakao=#{open_kakao},purpose=#{purpose},
		is_online=#{is_online},place=#{place},extra_info=#{extra_info},
		apply_condition=#{apply_condition},detail_info=#{detail_info},
		updated_at=current_timestamp() where idx=#{idx}
	</update>
	
	<!-- 스터디신청하기 -->
	<insert id="apply" parameterType="java.util.Map">
		insert into study_member (user_idx, study_idx, mem_status, is_admin, introduce)
		values (#{user_idx}, #{study_idx}, "승인 대기", 0, #{introduce} )
	</insert>
	<update id="add_member" parameterType="java.util.Map">
		update study
		set apply_count=apply_count+1
		where idx=#{study_idx}
	</update>
	
	<!-- 온오프 조건별 검색 -->
	<select resultType="study" id="search_list_condition" parameterType="java.util.Map">
		select * from (SELECT rank() over(order by idx desc) AS no, b.*
		FROM (select * from study
		<trim prefix="where" prefixOverrides="and|or">
			<if test="array != null">
				<foreach collection="array" item="item" open="(" close=")" separator="or">
					purpose=#{item}
				</foreach>
			</if>
			<if test="search != null and search_option != '3'.toString()">
				and is_online=#{search_option} AND title like CONCAT('%',#{search},'%')
			</if>
			<if test="search == null and search_option != '3'.toString()">
				and is_online=#{search_option}
			</if>
			<if test="search != null and search_option == '3'.toString()">
				and title like CONCAT('%',#{search},'%')
			</if>
		</trim>
		) AS b ) AS list
		where no between #{start} AND #{end}
	</select>
	
	<select resultType="int" id="search_count_condition" parameterType="java.util.Map">
		select count(*) from study
		<trim prefix="where" prefixOverrides="and|or">
			<if test="array != null">
				<foreach collection="array" item="item" open="(" close=")" separator="or">
					purpose=#{item}
				</foreach>
			</if>
			<if test="search != null and search_option != '3'.toString()">
				and is_online=#{search_option} AND title like CONCAT('%',#{search},'%')
			</if>
			<if test="search == null and search_option != '3'.toString()">
				and is_online=#{search_option}
			</if>
			<if test="search != null and search_option == '3'.toString()">
				and title like CONCAT('%',#{search},'%')
			</if>
		</trim>
	</select>
	
	<!-- 스터디 중복 확인 -->
	<select id="selectOne_member" resultType="studyMember" parameterType="java.util.Map">
		SELECT * FROM study_member
		WHERE study_idx = #{study_idx} AND user_idx = #{user_idx}
	</select>
	
	<!-- 스터디 관리자 멤버 추가 -->
	<insert id="add_admin_member" parameterType="java.util.Map">
		insert into study_member (user_idx, study_idx, is_admin, mem_status)
		values (#{user_idx}, #{idx}, 1, 'admin')
	</insert>
	
	<!-- user의 idx로 study_member의 status가져오기 -->	
	<select id="study_mem_status" parameterType="int" resultType="studyMember">
		select * from study_member where user_idx=#{user_idx}
	</select>
	
	<select id="study_mem_list" parameterType="int" resultType="study">
		select * from study where idx=#{study_idx}
	</select>
		
	<!-- 스터디 멤버 목록 가져오기 -->
	<select id="member_list" parameterType="int" resultType="studyMember">
		SELECT m.*, u.name, u.email, u.phone, u.region, u.job 
		FROM study_member m
		LEFT OUTER JOIN user u
		ON u.idx = m.user_idx
		WHERE study_idx = #{study_idx}
	</select>
	
	<!-- 선택 멤버 승인 -->
	<update id="mem_approve" parameterType="int">
		UPDATE study_member 
		SET mem_status = '승인'
		WHERE idx = #{idx}	
	</update>
	
	<!-- 선택 멤버 거부 -->
	<update id="mem_reject" parameterType="int">
		UPDATE study_member 
		SET mem_status = '승인거부'
		WHERE idx = #{idx}
	</update>
	
	<!-- 선택 멤버 강퇴 -->
	<update id="mem_kick" parameterType="int">
		UPDATE study_member 
		SET mem_status = '강제탈퇴'
		WHERE idx = #{idx}
	</update>
	
	<!-- 스터디 관리자 추가 -->
	<update id="add_admin" parameterType="int">
		UPDATE study_member
		SET mem_status = 'admin', is_admin = 1
		WHERE idx = #{idx}
	</update>
	
	<!-- 마이페이지 스터디룸 리스트 가져오기 -->
	<select id="study_myinfo" resultType="study" parameterType="int">
		SELECT *
		FROM study_member m
		LEFT OUTER JOIN study s
		ON m.study_idx = s.idx
		WHERE m.user_idx = #{user_idx}
	</select>
	
<<<<<<< HEAD
	<!-- 스터디 모집 취소 / 개설 취소 -->
	<update id="recruit_cancel" parameterType="int">
		UPDATE study
		SET study_status = '개설취소'
		WHERE idx = #{idx}
	</update>
	
=======
	<!-- 마이페이지 공지 수정 -->
	<update id="update_notice" parameterType="java.util.Map">
		UPDATE study
		SET notice=#{notice}
		WHERE idx=#{study_idx}
	</update>
>>>>>>> 72d1462c1ad59a6f9a172618904d7a936668db07
</mapper>












